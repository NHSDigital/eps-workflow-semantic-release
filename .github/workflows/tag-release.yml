name: Tag Release

on:
  workflow_call:
    inputs:
      dry_run:
        description: "Whether to run in dry-run mode (true) or create actual tags (false)"
        required: true
        type: boolean
      branch_name:
        description: "The branch name to base the release on"
        required: true
        type: string
      asdfVersion:
        type: string
        required: false
        default: "v0.18.0"
      publish_package:
        description: "Whether to publish a package to an npm registry"
        required: true
        type: boolean
      tag_format:
        description: "The tag format to use for the release tags"
        required: false
        type: string
        default: "v\\${version}"
    outputs:
      version_tag:
        value: ${{ jobs.tag_release.outputs.version_tag }}
      change_set_version:
        description: "The change set version for deployments"
        value: ${{ jobs.tag_release.outputs.change_set_version }}

jobs:
  install_semantic_release:
    # Install asdf
    # Use npm install -g to install semantic release and plugins globally
    ## These are installed in the asdf npm version
    # Bundle .asdf and upload as artifact
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout semantic-release workflow
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          repository: NHSDigital/eps-workflow-semantic-release
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            package.json
            package-lock.json
            .tool-versions
            release.config.cjs
            releaseNotesTemplates/commit.hbs

      - name: Calculate asdf cache key
        id: asdf_cache_key
        run: |
          base="${{ runner.os }}-asdf-${{ inputs.asdfVersion }}"
          key="$base-${{ hashFiles('**/.tool-versions') }}"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Calculate installed cache key
        id: installed_cache_key
        run: |
          base="${{ steps.asdf_cache_key.outputs.key }}-npm"
          key="$base-${{ hashFiles('**/package-lock.json') }}"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Calculate artifact cache key
        id: artifact_cache_key
        run: |
          base="${{ steps.installed_cache_key.outputs.key }}"
          key="$base-artifact"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Cache asdf artifact
        id: asdf_artifact_cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: asdf.tar.gz
          key: ${{ steps.artifact_cache_key.outputs.key }}
          restore-keys: ${{ steps.artifact_cache_key.outputs.base }}*

      - name: Cache asdf with installed npm packages
        if: ${{ steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        id: installed_cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: ~/.asdf
          key: ${{ steps.installed_cache_key.outputs.key }}
          restore-keys: ${{ steps.installed_cache_key.outputs.base }}*

      - name: Cache asdf
        if: ${{ steps.installed_cache.outcome == 'success' && steps.installed_cache.outputs.cache-hit != 'true' }}
        id: asdf_cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: ~/.asdf
          key: ${{ steps.asdf_cache_key.outputs.key }}
          restore-keys: |
            ${{ steps.asdf_cache_key.outputs.base }}*

      - name: Install asdf dependencies in .tool-versions
        if: ${{ steps.asdf_cache.outputs.cache-hit == 'false' || steps.asdf_cache.outcome != 'skipped' }}
        uses: asdf-vm/actions/install@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_version: ${{ inputs.asdfVersion }}

      - name: Install semantic release dependencies globally
        if: ${{ steps.installed_cache.outputs.cache-hit == 'false' || steps.installed_cache.outcome != 'skipped' }}
        run: |
          dependencies="$(jq -r '.devDependencies | to_entries | map("\(.key)@\(.value)") | join(" ")' package.json)"
          echo "Installing: $dependencies"

          # shellcheck disable=SC2086
          npm install --global $dependencies

      - name: Prepare asdf artifact
        if: ${{ steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        run: |
          tar -czf asdf.tar.gz -C "$HOME" .asdf

      - name: Upload asdf artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: asdf_artifact
          path: asdf.tar.gz

      - name: Prepare config artifact
        run: |
          mkdir -p config_artifact/releaseNotesTemplates
          cp release.config.cjs config_artifact/
          cp releaseNotesTemplates/commit.hbs config_artifact/releaseNotesTemplates/

      - name: Upload config artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: config_artifact
          path: config_artifact/

  tag_release:
    needs: install_semantic_release
    runs-on: ubuntu-22.04
    outputs:
      version_tag: ${{steps.output_version_tag.outputs.VERSION_TAG}}
      change_set_version: ${{ steps.output_change_set_version.outputs.CHANGE_SET_VERSION }}
    steps:
      - name: Fetch asdf artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: asdf_artifact
      - name: Install asdf
        uses: asdf-vm/actions/setup@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_version: ${{ inputs.asdfVersion }}

      - name: Extract asdf
        run: tar -xzf asdf.tar.gz -C "$HOME"

      - name: Setup node from cache
        run: |
          # Get installed node version (trim whitespace with xargs)
          NODE_VER=$(asdf list nodejs | head -n1 | xargs)
          NODE_DIR="$HOME/.asdf/installs/nodejs/$NODE_VER"

          echo "Using Node $NODE_VER from cache at $NODE_DIR"
          asdf set -u nodejs "$NODE_VER"

          # Prepend binaries to path
          echo "$NODE_DIR/bin" >> "$GITHUB_PATH"
          echo "$NODE_DIR/lib/node_modules/.bin" >> "$GITHUB_PATH"

          # # Set node path to resolve packages
          # NODE_PATH="$NODE_DIR/lib/node_modules"
          # echo "NODE_PATH=$NODE_PATH" >> $GITHUB_ENV

      - name: Clone calling repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}

      - name: Setup Git branch for semantic-release
        run: |
          # When running from a PR, GitHub checks out a merge commit
          # We need to ensure we're on the actual branch for semantic-release
          git checkout -B "${BRANCH_NAME}"
          git branch --show-current
        env:
          BRANCH_NAME: ${{ inputs.branch_name }}

      - name: Fetch semantic-release config
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: config_artifact

      - name: Cache asdf
        if: ${{ inputs.publish_package }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        if: ${{ inputs.publish_package }}
        uses: asdf-vm/actions/install@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_version: ${{ inputs.asdfVersion }}
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared

      - name: Install Dependencies
        if: ${{ inputs.publish_package }}
        run: make install

      - name: Set VERSION_TAG based on dry_run flag
        id: output_version_tag
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            # Determine semantic-release command based on branch
            if [ "${BRANCH_NAME}" = "main" ]; then
              echo "on main branch"
              npx semantic-release --dry-run --tag-format "${TAG_FORMAT}" > semantic-release-output.log
              exit_code=1
            else
              # For non-main branches, override the branches configuration
              echo "overriding branches for semantic-release to ${BRANCH_NAME}"

              # we need to set GITHUB_REF and GITHUB_EVENT_NAME for semantic-release to work correctly
              # but need to ensure that actionlint does not complain about unused variables

              # shellcheck disable=SC2034
              GITHUB_REF=refs/heads/${BRANCH_NAME}
              # shellcheck disable=SC2034
              GITHUB_EVENT_NAME=push 
              npx semantic-release --dry-run --branches "${BRANCH_NAME}" --branch "${BRANCH_NAME}" --tag-format "${TAG_FORMAT}" > semantic-release-output.log
              exit_code=0
            fi
            # Dry run mode: use short git SHA and get next version for summary
            VERSION_TAG=$(git rev-parse --short HEAD)
            NEXT_VERSION=$(grep -i 'The next release version is' semantic-release-output.log | sed -E 's/.* ([[:digit:].]+)$/\1/')
            # disabling shellcheck as replace does not work
            # shellcheck disable=SC2001
            NEW_VERSION_TAG=$(echo "$TAG_FORMAT" | sed "s/\${version}/$NEXT_VERSION/")
            echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
            echo "## NEXT TAG WILL BE : ${NEW_VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
            if [ -z "${NEXT_VERSION}" ]
            then
              echo "Could not get next tag. Here is the log from semantic-release"
              cat semantic-release-output.log
              exit ${exit_code}
            fi
          else
            # Production mode: get next version and create actual tag
            NEXT_VERSION=$($SEMANTIC_RELEASE_CMD | grep -i 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
            # disabling shellcheck as replace does not work
            # shellcheck disable=SC2001
            VERSION_TAG=$(echo "$TAG_FORMAT" | sed "s/\${version}/$NEXT_VERSION/")
            echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_OUTPUT"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH_NAME: ${{ inputs.branch_name }}
          PUBLISH_PACKAGE: ${{ inputs.publish_package }}
          TAG_FORMAT: ${{ inputs.tag_format }}

      - name: Create semantic release tag
        if: ${{ !inputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_PACKAGE: ${{ inputs.publish_package }}
          TAG_FORMAT: ${{ inputs.tag_format }}
        run: |
          npx semantic-release --tag-format "${TAG_FORMAT}"

      - name: Get release for editing
        if: ${{ !inputs.dry_run }}
        id: get_release
        # version 1.2.4
        uses: cardinalby/git-get-release-action@5172c3a026600b1d459b117738c605fabc9e4e44
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: ${{ steps.output_version_tag.outputs.VERSION_TAG }}

      - name: Edit Release
        if: ${{ !inputs.dry_run }}
        # version 1.2.0
        uses: irongut/EditRelease@ccf529ad26dddf9996e7dd0f24ca5da4ea507cc2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.get_release.outputs.id }}
          body: |
            ## Info
            [See code diff](${{ github.event.compare }})
            [Release workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }})

      - name: Output Change Set Version
        id: output_change_set_version
        shell: bash
        run: |
          TIMESTAMP=$(date +%s)
          VERSION=$(echo ${{ steps.output_version_tag.outputs.VERSION_TAG }} | tr . -)
          echo CHANGE_SET_VERSION="$VERSION-$TIMESTAMP" >> "$GITHUB_OUTPUT"
