name: Tag Release

on:
  workflow_call:
    inputs:
      tagFormat:
        type: string
        required: false
        default: "v\\${version}"
      semRelArgs:
        type: string
        required: false
        default: ""
      useNpm:
        type: boolean
        required: false
        default: false
      asdfVersion:
        type: string
        required: false
        default: "v0.18.0"

jobs:
  install_semantic_release:
    # Install asdf
    # Use npm install -g to install semantic release and plugins globally
    ## These are installed in the asdf npm version
    # Bundle .asdf and upload as artifact
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout semantic-release workflow
        uses: actions/checkout@v5
        with:
          repository: NHSDigital/eps-workflow-semantic-release
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            package.json
            package-lock.json
            .tool-versions
            release.config.cjs
            releaseNotesTemplates/commit.hbs

      - name: Calculate asdf cache key
        id: asdf_cache_key
        run: |
          base="${{ runner.os }}-asdf-${{ inputs.asdfVersion }}"
          key="$base-${{ hashFiles('**/.tool-versions') }}"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Calculate installed cache key
        id: installed_cache_key
        run: |
          base="${{ steps.asdf_cache_key.outputs.key }}-npm"
          key="$base-${{ hashFiles('**/package-lock.json') }}"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Calculate artifact cache key
        id: artifact_cache_key
        run: |
          base="${{ steps.installed_cache_key.outputs.key }}"
          key="$base-artifact"

          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "key=$key" >> "$GITHUB_OUTPUT"

      - name: Cache asdf artifact
        id: asdf_artifact_cache
        uses: actions/cache@v4
        with:
          path: asdf.tar.gz
          key: ${{ steps.artifact_cache_key.outputs.key }}
          restore-keys: ${{ steps.artifact_cache_key.outputs.base }}*

      - name: Cache asdf with installed npm packages
        if: ${{ steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        id: installed_cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ steps.installed_cache_key.outputs.key }}
          restore-keys: ${{ steps.installed_cache_key.outputs.base }}*

      - name: Cache asdf
        if: ${{ steps.installed_cache.outputs.cache-hit != 'true' }}
        id: asdf_cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ steps.asdf_cache_key.outputs.key }}
          restore-keys: |
            ${{ steps.asdf_cache_key.outputs.base }}*

      - name: Install asdf dependencies in .tool-versions
        if: ${{ steps.asdf_cache.outputs.cache-hit != 'true' || steps.installed_cache.outputs.cache-hit != 'true' || steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        uses: asdf-vm/actions/install@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_branch: ${{ inputs.asdfVersion }}

      - name: Install semantic release dependencies globally
        if: ${{ steps.installed_cache.outputs.cache-hit != 'true' || steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        run: |
          dependencies="$(jq -r '.devDependencies | to_entries | map("\(.key)@\(.value)") | join(" ")' package.json)"
          echo "Installing: $dependencies"

          # shellcheck disable=SC2086
          npm install --global $dependencies

      - name: Prepare asdf artifact
        if: ${{ steps.asdf_artifact_cache.outputs.cache-hit != 'true' }}
        run: |
          tar -czf asdf.tar.gz -C "$HOME" .asdf

      - name: Upload asdf artifact
        uses: actions/upload-artifact@v4
        with:
          name: asdf_artifact
          path: asdf.tar.gz

      - name: Prepare config artifact
        run: |
          mkdir -p config_artifact/releaseNotesTemplates
          cp release.config.cjs config_artifact/
          cp releaseNotesTemplates/commit.hbs config_artifact/releaseNotesTemplates/

      - name: Upload config artifact
        uses: actions/upload-artifact@v4
        with:
          name: config_artifact
          path: config_artifact/

  tag_release:
    needs: install_semantic_release
    runs-on: ubuntu-22.04
    outputs:
      version_tag: ${{steps.output_version_tag.outputs.VERSION_TAG}}
    steps:
      - name: Fetch asdf artifact
        uses: actions/download-artifact@v4
        with:
          name: asdf_artifact

      - name: Extract asdf
        run: tar -xzf asdf.tar.gz -C "$HOME"

      - name: Setup node from cache
        run: |
          # Source asdf
          source "$HOME/.asdf/asdf.sh"

          # Get installed node version (trim whitespace with xargs)
          NODE_VER=$(asdf list nodejs | head -n1 | xargs)
          NODE_DIR="$HOME/.asdf/installs/nodejs/$NODE_VER"

          echo "Using Node $NODE_VER from cache at $NODE_DIR"
          asdf global nodejs "$NODE_VER"

          # Prepend binaries to path
          echo "$NODE_DIR/bin" >> "$GITHUB_PATH"
          echo "$NODE_DIR/lib/node_modules/.bin" >> "$GITHUB_PATH"

          # # Set node path to resolve packages
          # NODE_PATH="$NODE_DIR/lib/node_modules"
          # echo "NODE_PATH=$NODE_PATH" >> $GITHUB_ENV

      - name: Clone calling repo
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}

      - name: Fetch semantic-release config
        uses: actions/download-artifact@v4
        with:
          name: config_artifact

      - name: Get next version tag
        id: output_version_tag
        run: |
          NEXT_VERSION=$(\
           semantic-release \
              --dry-run \
              --tag-format ${{ inputs.tagFormat }} \
              ${{ inputs.semRelArgs }} \
            | grep -i 'The next release version is' \
            | sed -E 's/.* ([[:digit:].]+)$/\1/'\
          )
          echo "NEXT_VERSION=${NEXT_VERSION}" >> "$GITHUB_OUTPUT"

          tagFormat="${{ inputs.tagFormat }}"
          VERSION_TAG=${tagFormat/\$\{version\}/$NEXT_VERSION}

          echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_OUTPUT"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create Release
        if: ${{ steps.output_version_tag.outputs.NEXT_VERSION != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release \
              --tag-format ${{ inputs.tagFormat }} \
              ${{ inputs.semRelArgs }}

      - name: Get release for editing
        id: get_release
        if: ${{ steps.output_version_tag.outputs.NEXT_VERSION != '' }}
        # version 1.2.4
        uses: cardinalby/git-get-release-action@5172c3a026600b1d459b117738c605fabc9e4e44
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          repo: ${{ github.repository }}
          tag: ${{ steps.output_version_tag.outputs.VERSION_TAG }}

      - name: Edit Release
        if: ${{ steps.output_version_tag.outputs.NEXT_VERSION != '' }}
        # version 1.2.0
        uses: irongut/EditRelease@ccf529ad26dddf9996e7dd0f24ca5da4ea507cc2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.get_release.outputs.id }}
          body: |
            ## Info
            [See code diff](${{ github.event.compare }})
            [Release workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }})
